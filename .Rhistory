install.packages("toastui")
library(toastui)
calendar(cal_demo_data("week"), view = "week", defaultDate = Sys.Date())
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
library(toastui)
calendar(cal_demo_data("week"), view = "week", defaultDate = Sys.Date())
cal_week_options(
+     startDayOfWeek = 1,
library(toastui)
calendar(cal_demo_data("week"), view = "week", defaultDate = Sys.Date())
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
library(toastui)
calendar(cal_demo_data("week"), view = "week", defaultDate = Sys.Date())
cal_week_options(cal,
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
library(toastui)
calendar(cal_demo_data("week"), view = "week", defaultDate = Sys.Date()) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
library(toastui)
calendar(cal_demo_data("week"), view = "week", defaultDate = Sys.Date()) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
library(toastui)
calendar(cal_demo_data("week"), view = "week", defaultDate = Sys.Date(), useDetailPopup = FALSE) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
# defaultDate = Sys.Date()
library(toastui)
calendar(cal_demo_data("week"), view = "week", defaultDate = Sys.Date()) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
# defaultDate = Sys.Date()
library(toastui)
calendar(cal_demo_data("week"), view = "week", defaultDate = Sys.Date()) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
# defaultDate = Sys.Date()
# detail popup has edit/delete buttons, but also gives a description, but we probably don't want to have edit and delete buttons, but nice to have a description (to remove, add useDetailPopup = FALSE, TRUE is default)
library(toastui)
cal_demo_data("week")
library(toastui)
calendar(cal_demo_data("week"), view = "week", defaultDate = Sys.Date(), height = 1000) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
# defaultDate = "2024-06-11"
# height - sorta hardcoding it so that it looks nice on a regular screen size
# detail popup has edit/delete buttons, but also gives a description, but we probably don't want to have edit and delete buttons, but nice to have a description (to remove, add useDetailPopup = FALSE, TRUE is default)
options(repos = c(
carpentries = "https://carpentries.r-universe.dev/",
CRAN = "https://cran.rstudio.com/"
))
install.packages(c("sandpaper", "varnish", "pegboard", "tinkr"))
rmarkdown::pandoc_version()
tmp <- tempfile()
sandpaper::no_package_cache()
sandpaper::create_lesson(tmp, open = FALSE)
sandpaper::build_lesson(tmp, preview = FALSE, quiet = TRUE)
fs::dir_tree(tmp, recurse = 1)
library("fs")
library("sandpaper")
bb <- path_home("/Users/jqiu/Documents/CBWGithub/cbw-dev-test-pages/carpentries-w-o-R-test")
print(bb)
create_lesson(bb)
prime_mean <- mean(prime)
prime_mean <- mean(prime)
?mean
prime_mean <- mean(prime)
?mean
?cal_demo_data
?calender
?calendar
cal_demo_data("month")
library(toastui)
cal_demo_data("month")
?calendar
reticulate::repl_python()
library(reticulate)
x = 42
print(x)
x = x + 12
print(x)
reticulate::repl_python()
py$x
py$y = 1:5
reticulate::repl_python()
reticulate::py_last_error()
reticulate::py_last_error()
reticulate::py_last_error()
python
REPL
Python 3.9.6 (/Users/jqiu/.virtualenvs/r-reticulate/bin/python)
library(reticulate)
py_config()
system("pip install matplotlib")
heart$smoking_status
heart$smoking_status
levels(heart$smoking_status)
help -s help
library(toastui)
cal_demo_data("week")
library(toastui)
calendar(cal_demo_data("week"), view = "week", height = 1000) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
# defaultDate = "2024-06-11"
# height - sorta hardcoding it so that it looks nice on a regular screen size
# detail popup has edit/delete buttons, but also gives a description, but we probably don't want to have edit and delete buttons, but nice to have a description (to remove, add useDetailPopup = FALSE, TRUE is default)
library(toastui)
cal_demo_data("month")
Data_Frame <- data.frame (
Training = c("Strength", "Stamina", "Other"),
Pulse = c(100, 150, 120),
Duration = c(60, 30, 45)
)
# Print the data frame
Data_Frame
library(toastui)
cal_demo_data("month")
library(toastui)
cal_demo_data("week")
library(toastui)
calendar(cal_demo_data("week"), view = "week", height = 1000) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
# defaultDate = "2024-06-11"
# height - sorta hardcoding it so that it looks nice on a regular screen size
# detail popup has edit/delete buttons, but also gives a description, but we probably don't want to have edit and delete buttons, but nice to have a description (to remove, add useDetailPopup = FALSE, TRUE is default)
Data_Frame <- data.frame (
calendarID = c(1, 2, 3),
title = c("A", "B", "C"),
body = c("aaaaa", "bbbb", "cccccc"),
start = c("2024-10-14 8:00:00", "2024-10-14 14:00:00", "2024-10-16 08:00:00"),
end = c("	2024-10-14 12:00:00", "2024-10-14 18:00:00", "2024-10-16 11:00:00"),
category = c("time", "time", "time")
)
# Print the data frame
Data_Frame
Data_Frame <- data.frame (
calendarID = c(1, 2, 3),
title = c("A", "B", "C"),
body = c("aaaaa", "bbbb", "cccccc"),
start = c("2024-10-14 8:00:00", "2024-10-14 14:00:00", "2024-10-16 08:00:00"),
end = c("2024-10-14 12:00:00", "2024-10-14 18:00:00", "2024-10-16 11:00:00"),
category = c("time", "time", "time")
)
# Print the data frame
Data_Frame
library(toastui)
Data_Frame <- data.frame (
calendarID = c(1, 2, 3),
title = c("A", "B", "C"),
body = c("aaaaa", "bbbb", "cccccc"),
start = c("2024-10-14 8:00:00", "2024-10-14 14:00:00", "2024-10-16 08:00:00"),
end = c("2024-10-14 12:00:00", "2024-10-14 18:00:00", "2024-10-16 11:00:00"),
category = c("time", "time", "time")
)
# Print the data frame
Data_Frame
calendar(Data_Frame("week"), view = "week", height = 1000) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
library(toastui)
Data_Frame <- data.frame (
calendarID = c(1, 2, 3),
title = c("A", "B", "C"),
body = c("aaaaa", "bbbb", "cccccc"),
start = c("2024-10-14 8:00:00", "2024-10-14 14:00:00", "2024-10-16 08:00:00"),
end = c("2024-10-14 12:00:00", "2024-10-14 18:00:00", "2024-10-16 11:00:00"),
category = c("time", "time", "time")
)
# Print the data frame
Data_Frame
calendar(Data_Frame, view = "week", height = 1000) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
library(toastui)
Data_Frame <- data.frame (
calendarID = c(1, 2, 3, 2),
title = c("A", "B", "C", "D"),
body = c("aaaaa", "bbbb", "cccccc", "dddddd"),
start = c("2024-10-14 8:00:00", "2024-10-14 14:00:00", "2024-10-16 08:00:00", "2024-10-17 08:00:00"),
end = c("2024-10-14 12:00:00", "2024-10-14 18:00:00", "2024-10-16 11:00:00", "2024-10-17 19:00:00"),
category = c("time", "time", "time", "time")
)
# Print the data frame
Data_Frame
calendar(Data_Frame, view = "week", height = 1000) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
library(toastui)
Data_Frame <- data.frame (
calendarID = c(1, 2, 3, 2),
title = c("A", "B", "C", "D"),
body = c("aaaaa", "bbbb", "cccccc", "dddddd"),
start = c("2024-10-14 8:00:00", "2024-10-14 14:00:00", "2024-10-16 08:00:00", "2024-10-17 08:00:00"),
end = c("2024-10-14 12:00:00", "2024-10-14 18:00:00", "2024-10-16 11:00:00", "2024-10-17 19:00:00"),
category = c("time", "time", "time", "time")
)
# Print the data frame
Data_Frame
calendar(Data_Frame, view = "week", height = 1000) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
#cal_props(cal_demo_props())
library(toastui)
Data_Frame <- data.frame (
calendarID = c(1, 2, 3, 2),
title = c("A", "B", "C", "D"),
body = c("aaaaa", "bbbb", "cccccc", "dddddd"),
start = c("2024-10-14 8:00:00", "2024-10-14 14:00:00", "2024-10-16 08:00:00", "2024-10-17 08:00:00"),
end = c("2024-10-14 12:00:00", "2024-10-14 18:00:00", "2024-10-16 11:00:00", "2024-10-17 19:00:00"),
category = c("time", "time", "time", "time")
)
# Print the data frame
Data_Frame
calendar(Data_Frame, view = "week", height = 1000) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) #%>%
#cal_props(cal_demo_props())
library(toastui)
Data_Frame <- data.frame (
calendarID = c(1, 2, 3, 2),
title = c("A", "B", "C", "D"),
body = c("aaaaa", "bbbb", "cccccc", "dddddd"),
start = c("2024-10-14 8:00:00", "2024-10-14 14:00:00", "2024-10-16 08:00:00", "2024-10-17 08:00:00"),
end = c("2024-10-14 12:00:00", "2024-10-14 18:00:00", "2024-10-16 11:00:00", "2024-10-17 19:00:00"),
category = c("time", "time", "time", "time")
)
# Print the data frame
Data_Frame
calendar(Data_Frame, view = "week", height = 1000, defaultDate = "2024-06-11") %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
library(toastui)
Data_Frame <- data.frame (
calendarID = c(1, 2, 3, 2),
title = c("A", "B", "C", "D"),
body = c("aaaaa", "bbbb", "cccccc", "dddddd"),
start = c("2024-10-14 8:00:00", "2024-10-14 14:00:00", "2024-10-16 08:00:00", "2024-10-17 08:00:00"),
end = c("2024-10-14 12:00:00", "2024-10-14 18:00:00", "2024-10-16 11:00:00", "2024-10-17 19:00:00"),
category = c("time", "time", "time", "time")
)
# Print the data frame
Data_Frame
calendar(Data_Frame, view = "week", height = 1000, defaultDate = "2024-10-14") %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
library(toastui)
Data_Frame <- data.frame (
calendarID = c(1, 2, 3, 2),
title = c("A", "B", "C", "D"),
body = c("aaaaa", "bbbb", "cccccc", "dddddd"),
start = c("2024-10-14 8:00:00", "2024-10-14 14:00:00", "2024-10-16 08:00:00", "2024-10-17 08:00:00"),
end = c("2024-10-14 12:00:00", "2024-10-14 18:00:00", "2024-10-16 11:00:00", "2024-10-17 19:00:00"),
category = c("time", "time", "time", "time")
)
# Print the data frame
Data_Frame
calendar(Data_Frame, view = "week", height = 1000, defaultDate = "2024-10-18") %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
install.packages(“xlsx”)
install.packages("xlsx")
library(toastui)
library(xlsx)
library(toastui)
excel_path <- "sample_toastui_excel.xlsx"
# maybe make this a for loop
calendarID <- read.excel(excel_path, sheetName = "Sheet1", colIndex = 1)
library(toastui)
my_data <- read_excel(excel_path, sheet = "Sheet1")
install.packages("readxl")
library(toastui)
library(readxl)
my_data <- read_excel(excel_path, sheet = "Sheet1")
# # maybe make this a for loop
# calendarID <- select(excel_path, sheet = "Sheet1", colIndex = 1)
# title <- read_excel(excel_path, sheet = "Sheet1", colIndex = 2)
# body <- read_excel(excel_path, sheet = "Sheet1", colIndex = 3)
# start <- read_excel(excel_path, sheet = "Sheet1", colIndex = 4)
# end <- read_excel(excel_path, sheet = "Sheet1", colIndex = 5)
# category <- read_excel(excel_path, sheetName = "Sheet1", colIndex = 6)
#
# df <- data.frame(calendarID, title, body, start, end, category)
#
# # Print the data frame
# df
calendar(my_data, view = "week", height = 1000, defaultDate = "2024-10-18") %>%
cal_week_options(
startDayOfWeek = 1,
workweek = FALSE
) %>%
cal_props(cal_demo_props())
library(toastui)
library(readxl)
my_data <- read_excel(excel_path, sheet = "Sheet1")
calendar(my_data, view = "week", height = 1000, defaultDate = "2024-10-18") %>%
cal_week_options(
startDayOfWeek = 1,
workweek = FALSE
) %>%
cal_props(cal_demo_props())
library(toastui)
library(readxl)
my_data <- read_excel(excel_path, sheet = "Sheet1")
calendar(my_data, view = "week", height = 1000, defaultDate = "2024-10-18") %>%
cal_week_options(
startDayOfWeek = 1,
workweek = FALSE
) %>%
cal_props(cal_demo_props())
library(toastui)
library(readxl)
my_data <- read_excel("sample_toastui_excel.xlsx", sheet = "Sheet1")
calendar(my_data, view = "week", height = 1000, defaultDate = "2024-10-18") %>%
cal_week_options(
startDayOfWeek = 1,
workweek = FALSE
) %>%
cal_props(cal_demo_props())
library(toastui)
library(readxl)
my_data <- read_excel("sample_toastui_excel.xlsx", sheet = "Sheet1")
calendar(my_data, view = "week", height = 1000, defaultDate = "2024-10-18") %>%
cal_week_options(
startDayOfWeek = 1,
workweek = FALSE
) %>%
cal_props(cal_demo_props())
library(toastui)
library(readxl)
my_data <- read_excel("sample_toastui_excel.xlsx", sheet = "Sheet1")
my_data
calendar(my_data, view = "week", height = 1000, defaultDate = "2024-10-18") %>%
cal_week_options(
startDayOfWeek = 1,
workweek = FALSE
) %>%
cal_props(cal_demo_props())
library(toastui)
library(readxl)
my_data <- read_excel("sample_toastui_excel.xlsx", sheet = "Sheet1")
my_data
calendar(my_data, view = "week", height = 1000, defaultDate = "2024-10-18") %>%
cal_week_options(
startDayOfWeek = 1,
workweek = FALSE
) %>%
cal_props(cal_demo_props())
library(toastui)
library(readxl)
my_data <- read_excel("sample_toastui_excel.xlsx", sheet = "Sheet1")
my_data
calendar(my_data, view = "week", height = 1000, defaultDate = "2024-10-18") %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
library(toastui)
calendar(cal_demo_data("week"), view = "week", height = 1000) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
# defaultDate = "2024-06-11"
# height - sorta hardcoding it so that it looks nice on a regular screen size
# detail popup has edit/delete buttons, but also gives a description, but we probably don't want to have edit and delete buttons, but nice to have a description (to remove, add useDetailPopup = FALSE, TRUE is default)
library(toastui)
cal_demo_data()
calendar(cal_demo_data("week"), view = "week", height = 1000) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
# defaultDate = "2024-06-11"
# height - sorta hardcoding it so that it looks nice on a regular screen size
# detail popup has edit/delete buttons, but also gives a description, but we probably don't want to have edit and delete buttons, but nice to have a description (to remove, add useDetailPopup = FALSE, TRUE is default)
library(toastui)
calendar(cal_demo_data("week"), view = "week", height = 1000) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
# defaultDate = "2024-06-11"
# height - sorta hardcoding it so that it looks nice on a regular screen size
# detail popup has edit/delete buttons, but also gives a description, but we probably don't want to have edit and delete buttons, but nice to have a description (to remove, add useDetailPopup = FALSE, TRUE is default)
library(toastui)
cal_demo_data()
cal_demo_data("week")
library(toastui)
calendar(cal_demo_data("month"), view = "week", height = 1000) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
# defaultDate = "2024-06-11"
# height - sorta hardcoding it so that it looks nice on a regular screen size
# detail popup has edit/delete buttons, but also gives a description, but we probably don't want to have edit and delete buttons, but nice to have a description (to remove, add useDetailPopup = FALSE, TRUE is default)
library(toastui)
calendar(cal_demo_data(), view = "month", height = 1000) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
# defaultDate = "2024-06-11"
# height - sorta hardcoding it so that it looks nice on a regular screen size
# detail popup has edit/delete buttons, but also gives a description, but we probably don't want to have edit and delete buttons, but nice to have a description (to remove, add useDetailPopup = FALSE, TRUE is default)
library(toastui)
calendar(cal_demo_data(), view = "week", height = 1000) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
# defaultDate = "2024-06-11"
# height - sorta hardcoding it so that it looks nice on a regular screen size
# detail popup has edit/delete buttons, but also gives a description, but we probably don't want to have edit and delete buttons, but nice to have a description (to remove, add useDetailPopup = FALSE, TRUE is default)
library(toastui)
calendar(cal_demo_data("week"), view = "week", height = 1000) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
# defaultDate = "2024-06-11"
# height - sorta hardcoding it so that it looks nice on a regular screen size
# detail popup has edit/delete buttons, but also gives a description, but we probably don't want to have edit and delete buttons, but nice to have a description (to remove, add useDetailPopup = FALSE, TRUE is default)
reticulate::repl_python()
library(toastui)
library(readxl)
my_data <- read_excel("sample_toastui_excel.xlsx", sheet = "Sheet1")
my_data
calendar(my_data, view = "week", height = 1000, defaultDate = "2024-10-18") %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
library(toastui)
calendar(cal_demo_data("week"), view = "week", height = 1000) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
# defaultDate = "2024-06-11"
# height - sorta hardcoding it so that it looks nice on a regular screen size
# detail popup has edit/delete buttons, but also gives a description, but we probably don't want to have edit and delete buttons, but nice to have a description (to remove, add useDetailPopup = FALSE, TRUE is default)
